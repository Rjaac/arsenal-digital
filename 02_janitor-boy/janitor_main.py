#!/usr/bin/env python3
"""
main.py – 02_janitor-boy
Created: 2025-04-09
Author: ChatGPT (Marty)

Description:
Loads the latest snapshot generated by mirror, applies cleanup rules from a YAML profile,
and generates a markdown report with suggested actions.
"""

import os
import sys
import yaml
import json
from datetime import datetime

def load_yaml(path):
    if not os.path.exists(path):
        print(f"[ERROR] YAML file not found: {path}")
        sys.exit(1)
    with open(path, "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

def load_json(path):
    if not os.path.exists(path):
        print(f"[ERROR] JSON file not found: {path}")
        sys.exit(1)
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def find_last_snapshot_path(mirror_dir):
    pointer_path = os.path.join(mirror_dir, "last_snapshot.txt")
    if not os.path.exists(pointer_path):
        print("[ERROR] last_snapshot.txt not found.")
        sys.exit(1)
    with open(pointer_path, "r") as f:
        snapshot_folder = f.read().strip()
    return os.path.join(mirror_dir, "mirror_snapshots", snapshot_folder, "system_info.json")

def apply_uninstall_rules(software_list, rules):
    suggestions = []
    blacklist = rules.get("blacklist", [])
    keywords = rules.get("keyword_match", [])

    for app in software_list:
        name = app.get("name", "").lower()
        matched = False
        reason = ""

        for item in blacklist:
            if item.lower() in name:
                matched = True
                reason = f"blacklist match: {item}"
                break

        if not matched:
            for kw in keywords:
                if kw.lower() in name:
                    matched = True
                    reason = f"keyword match: {kw}"
                    break

        if matched:
            suggestions.append({
                "name": app.get("name", "Unknown"),
                "version": app.get("version", "N/A"),
                "reason": reason
            })

    return suggestions

def write_report(suggestions, output_path):
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(f"# janitor-boy Report – {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n")
        if not suggestions:
            f.write("✅ No redundant software detected.\n")
        else:
            f.write("## Suggested Uninstalls:\n")
            for s in suggestions:
                f.write(f"- **{s['name']}** ({s['version']}) – {s['reason']}\n")

def main():
    base_dir = os.path.dirname(__file__)
    profile_path = os.path.join(base_dir, "profiles", "deep_clean.yaml")
    mirror_dir = os.path.join(os.path.dirname(base_dir), "01_mirror")

    profile = load_yaml(profile_path)
    snapshot_path = find_last_snapshot_path(mirror_dir)
    snapshot = load_json(snapshot_path)

    software_list = snapshot.get("installed_software", [])
    uninstall_rules = profile.get("uninstall_rules", {})

    suggestions = apply_uninstall_rules(software_list, uninstall_rules)

    report_path = os.path.join(base_dir, "logs", f"janitor_suggestions_{datetime.now().strftime('%Y%m%d_%H%M')}.md")
    write_report(suggestions, report_path)

    print(f"[janitor-boy] Analysis complete. Report written to: {report_path}")

if __name__ == "__main__":
    main()
